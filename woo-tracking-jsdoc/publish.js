const fs = require( 'jsdoc/fs' );
const env = require( 'jsdoc/env' );
const path = require( 'jsdoc/path' );

// RegExp used to match the replacement. The groups are respectively: start marker, replacable content, end marker.
const defaultReplacementRegex = /(<woo-tracking-jsdoc(?:\s[^>]*)?>)([\s\S]*)(<\/woo-tracking-jsdoc.*>)/;

const disclaimerStart = `<!---
Everything below will be automatically generated by \`woo-tracking-jsdoc\`.
Do not edit it manually!
-->`;
const disclaimerEnd = `<!---
End of \`woo-tracking-jsdoc\`-generated content.
-->
`;

/** @module publish */

/**
 * Generate documentation output.
 *
 * @param {Object} data - A TaffyDB collection representing
 *                       all the symbols documented in your code.
 */
exports.publish = function ( data ) {
	const {
		conf: {
			templates: {
				'woo-tracking-jsdoc': {
					path: readmePath = 'TRACKING.md',
					replacement,
				} = {},
			} = {},
		} = {},
		pwd,
	} = env;

	const replacementRegex = replacement
		? new RegExp( replacement )
		: defaultReplacementRegex;

	let mdResult = '';

	data( { kind: 'event' } )
		.order( 'name' )
		.each( ( symbol ) => {
			// Build the event title with the link to its source.
			const localLocation =
				path.relative(
					pwd,
					path.join( symbol.meta.path, symbol.meta.filename )
				) +
				'#L' +
				symbol.meta.lineno;
			mdResult += `\n### [\`${ symbol.name }\`](${ localLocation })\n`;
			// description
			mdResult += ( symbol.description || '' ) + '\n';
			// Build properites table.
			if ( symbol.properties ) {
				mdResult += `#### Properties
|   |   |   |
|---|---|---|\n`;
				symbol.properties.forEach( ( property ) => {
					// Escape `|` for markdown table.
					const type = property.type.parsedType.typeExpression.replace(
						/\|/g,
						'\\|'
					);
					const description = property.description.replace(
						/\|/g,
						'\\|'
					);
					mdResult += `\`${ property.name }\` | \`${ type }\` | ${ description }\n`;
				} );
			}
		} );

	let readme = fs.readFileSync( readmePath, 'utf8' );
	// Replace the marker with generated content.
	readme = readme.replace(
		replacementRegex,
		`$1\n${ disclaimerStart }\n${ mdResult }\n${ disclaimerEnd }$3`
	);
	fs.writeFileSync( readmePath, readme, 'utf8' );
	return mdResult;
};
